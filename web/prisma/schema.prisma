// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile information
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password for email/password auth
  bio           String?
  institution   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  savedPapers   SavedPaper[]
  conversations Conversation[]
  preferences   UserPreference?
  interests     ResearchInterest[]
  githubProfile GithubProfile?
  passwordReset PasswordReset?
}

// NextAuth.js models for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Research papers
model Paper {
  id          String   @id @default(cuid())
  title       String
  authors     String
  abstract    String?  @db.Text
  year        Int
  journal     String?
  url         String?
  arxivId     String?  @unique
  doi         String?  @unique
  citations   Int?
  field       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  savedBy     SavedPaper[]
  messages    Message[]
}

// Saved papers by users
model SavedPaper {
  id        String   @id @default(cuid())
  userId    String
  paperId   String
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  paper     Paper    @relation(fields: [paperId], references: [id], onDelete: Cascade)

  @@unique([userId, paperId])
}

// User research interests
model ResearchInterest {
  id        String   @id @default(cuid())
  userId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

// User preferences
model UserPreference {
  id                String  @id @default(cuid())
  userId            String  @unique
  theme             String  @default("system") // light, dark, system
  papersPerPage     Int     @default(10)
  defaultSortOrder  String  @default("relevance")
  showAbstracts     Boolean @default(true)
  showCitations     Boolean @default(true)
  compactView       Boolean @default(false)
  emailNotifications Boolean @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// GitHub integration
model GithubProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  githubUsername  String
  accessToken     String?  @db.Text
  refreshToken    String?  @db.Text
  expiresAt       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositories    GithubRepository[]
}

model GithubRepository {
  id              String   @id @default(cuid())
  githubProfileId String
  name            String
  description     String?  @db.Text
  url             String
  stars           Int      @default(0)
  forks           Int      @default(0)
  language        String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  githubProfile   GithubProfile @relation(fields: [githubProfileId], references: [id], onDelete: Cascade)
  recommendations PaperRecommendation[]
}

// Chat conversations
model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String
  type      String   // "smart-answer" or "smart-search"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  content        String   @db.Text
  isUserMessage  Boolean  @default(false)
  timestamp      DateTime @default(now())
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  papers         Paper[]      // Papers referenced in this message
}

// Paper recommendations for GitHub repositories
model PaperRecommendation {
  id               String   @id @default(cuid())
  repositoryId     String
  query            String   @db.Text
  recommendationData Json    // Stores the full recommendation data
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  repository       GithubRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
}

// Add this model to your existing schema
model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
